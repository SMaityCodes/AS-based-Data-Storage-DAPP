// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;


interface IMemoryArray  { function getElement(uint) external pure  returns (uint); }
interface IStorageArray { function getElement(uint) external view returns (uint); }

contract ArrayCaller {
    IMemoryArray  public memoryArray;
    IStorageArray public storageArray;

    
    constructor(address _memoryAddr, address _storageAddr) {
        memoryArray  = IMemoryArray(_memoryAddr);
        storageArray = IStorageArray(_storageAddr);
    }

    function readFromMemory(uint index)  external view returns (uint) {
        return memoryArray.getElement(index);   // pure call, no state read
    }

    function readFromStorage(uint index) external view returns (uint) {
        return storageArray.getElement(index);  // view call, reads storage
    }
}
